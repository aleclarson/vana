import { Observable } from './Observable';
import { Tapped } from './tap';
/** Useful for `subscribe` functions built on `vana` */
export declare type Observed<T> = T extends Observable<infer U> ? U : Tapped<T>;
export * from './Observable';
export * from './OSink';
export * from './OPath';
export * from './OPromise';
export * from './OProps';
export * from './OTuple';
export * from './Change';
export * from './array';
export * from './bind';
export * from './become';
export * from './commit';
export * from './commitArray';
export * from './commitIndices';
export * from './debug';
export * from './freeze';
export * from './keepAlive';
export * from './latest';
export * from './o';
export * from './revise';
export * from './tap';
export * from './watch';
export { Draft, Immutable, isDraft, nothing, original, immerable } from 'immer';
export { Recipe, produce, setUseProxies, setAutoFreeze } from '../shared/immer';
export { Disposable, IDisposable, IThenable, $O } from '../shared';
